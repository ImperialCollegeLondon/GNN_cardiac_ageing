"""
Created on Mon Dec  7 12:43:37 2020
@author: gbello, sjadhav
"""
import numpy as np
import os
import pandas as pd
import pickle
import fnmatch
from tqdm import tqdm
from pathlib import Path
from argparse import ArgumentParser
import shutil

"""
The code below loops through all IHD subjects and reads their mesh coordinate files at all 25 frames of the cardiac cycle.
For each subject's meshes, it computes the displacement between mesh coordinates at Frame 0 (End Diastole [the phase at which
the heart is about to begin contraction]) and the mesh coordinates at other frames (i.e. Frames 1 to 24). The displacement is
computed for each coordinate (x, y and z). See NMI paper for more details
The displacement (motion) data is stored in a large matrix (named 'X_all')


To run this script, use command:

python DataProcessing-1_2.py --csv /mnt/storage/{username}/cardiac/4DS_DCM/data/age_outcome_CVMHFMAE.csv
                             --subject /mnt/storage/{username}/cardiac/UKBB_40616/UKBB_motion_analysis/results/RBH/
"""


def prepare_data(x, e, t, ilist):
    #   x, e, t = dataset['x'], dataset['e'], dataset['t']
    sort_idx = np.argsort(t)[::-1]
    x = x[sort_idx]
    e = e[sort_idx]
    t = t[sort_idx]
    i = np.array(ilist)[sort_idx]
    x = x.astype("float32")
    e = e.astype("int32")
    t = t.astype("float32")
    return x, e, t, i


def all_files_exist(flist):
    numfiles = len(flist)
    allexist = True
    co = 0
    while allexist and co < numfiles:
        allexist = os.path.isfile(flist[co])
        co += 1
    return allexist


def file_len(fname):
    if os.path.isfile(fname) and os.path.getsize(fname) > 0:
        with open(fname) as f:
            for i, l in enumerate(f):
                pass
        return i + 1
    else:
        return 0


def main(age_outcome_path: Path, subject_dir: Path, output_path: Path, n_frames: int, numpy_arrays_pkls_dir):
    os.makedirs(numpy_arrays_pkls_dir, exist_ok = True)

    # Import survival outcome data (as generated by CreateSurvOutcome.py)
    # path = '/mnt/storage/home/sjadhav/'  # Use PWD
    # File contains PID. Status, time are used at the end to write pkl file.
    brnew = pd.read_csv(str(age_outcome_path))
    brnew = brnew[np.logical_not(brnew.h_dis.isna())]
    brnew = brnew[np.logical_or(brnew.h_dis<20, brnew.Motion_Good1_Bad0==1)]

    id_list = list(np.array(brnew['eid_18545'], dtype=str))
    np.random.shuffle(id_list)
    #id_list = id_list[:517]

    #print(len(id_list))
    frames = [tq for tq in range(n_frames)]
    numframes = len(frames)
    num_vertx = 21510

    # Define the location of the mesh data for IHD subjects
    dir1_dlist = [dr for dr in os.listdir(str(subject_dir)) if subject_dir.joinpath(dr).is_dir()]

    # Define empty matrix to hold mesh displacement data. It will be 4-dimensional:
    # of patients x # of frames x # of vertices x # of coordinates
    # X_all = np.zeros(shape=(len(id_list), (numframes-1), num_vertx, 3), dtype=float)
    X_all = []
    id_all = []

    # print all ids that are in ids csv but does not have motion folder
    found = 0
    not_found = 0
    for id_ in id_list:
        has_motion = False
        for di in dir1_dlist:
            if id_ in di:
                has_motion = True
        if has_motion:
            found += 1
        else:
            print("No Motion folder", id_)
            #with open("not_found.txt", "a") as f:
            #    f.write(id_)
            #    f.write('\n')
            not_found += 1
    print('Total found', found)
    print('Total not found', not_found)
    #assert not_found == 0

    # print all ids that has motion folder but not in ids csv
    # for di in dir1_dlist:
        # in_csv = False
        # for id_ in id_list:
            # if id_ == di:
                # in_csv = True
        # if not in_csv:
            # print("Not in csv", di)

    # Loop through subject id_s
    del di
    for counter, id_ in enumerate(tqdm(id_list)):
        try:
            pkl_output_path = os.path.join(numpy_arrays_pkls_dir, id_+'.pkl')
            if not os.path.exists(pkl_output_path):
                #continue
                if id_ not in dir1_dlist:
                    raise Exception(id_ + ' : folder not found')
                #print(id_, di)
                frames_file_list = [
                    subject_dir.joinpath(id_, "TXT", "LV_endo", "LVendo_fr{:0>2}.txt".format(b))
                    for b in range(numframes)
                ]

                if not all_files_exist(frames_file_list):
                    raise Exception(id_ + ' : folder exists but no LV files')

                files = fnmatch.filter(os.listdir(str(subject_dir.joinpath(id_, 'TXT', "LV_endo"))), 'LVendo_fr*.txt')
                n = len(files)

                if n != n_frames:
                    raise Exception(id_ + ' : LV files exist but not {} in number'.format(n_frames))

                if np.sum([file_len(frames_file_list[i]) == num_vertx for i in range(n_frames)]) != n_frames:
                    raise Exception(id_ + ' : ' + str([file_len(frames_file_list[i]) for i in range(n_frames)]))

                coords_fr0 = np.loadtxt(str(frames_file_list[0]))
                subject_x_rel = np.zeros(shape=((numframes-1), num_vertx, 3), dtype=float)
                subject_x_abs = np.zeros(shape=((numframes), num_vertx, 3), dtype=float)
                subject_x_abs[0, :, :] = coords_fr0
                for j in range(1, numframes):
                    coords_frj = np.loadtxt(str(frames_file_list[j]))
                    # compute displacement between Frame 0 (reference frame) and Frame j
                    subject_x_rel[j-1, :, :] = coords_frj - coords_fr0
                    subject_x_abs[j, :, :] = coords_frj
                    # print(j,X_all[counter,j-1,:,:])

                with open(pkl_output_path+'_tmp', 'wb') as f:
                    pickle.dump((subject_x_rel, subject_x_abs), f, protocol=pickle.HIGHEST_PROTOCOL)
                shutil.move(pkl_output_path+'_tmp', pkl_output_path)

            X_all.append(pkl_output_path)
            id_all.append(id_)

        except Exception as e:
            print(f'Exception raised for ID {id_}')
            print(e)
    #X_all = np.stack(X_all, axis=0)
    #print("X_all shape", X_all.shape)

    # Save mesh motion and survival outcome data into one file (tobe used by DataProcessing-2_2.py)
    plist = [X_all, id_all]
    with open(str(output_path), 'wb') as f:
        pickle.dump(plist, f, protocol=4)


def parse_args():
    parser = ArgumentParser()
    parser.add_argument(
        "--subject", dest="subject_dir", type=str, required=True,
        help="Subject directory where the motion results are. E.g.: e.g. ~/cardiac/UKBB_40616/UKBB_motion_analysis/results/UKBB"
    )
    parser.add_argument(
        "--csv", dest="individual_ids_csv_path", type=str, default=None,
        help="Path point to individuals ids csv. "
             "Default is healthy_5411_bridged.csv that is inside the data directory of the repo."
    )
    parser.add_argument("--numpy-arrays-pkls-dir", dest="numpy_arrays_pkls_dir", type=str, default='/tmp/tmp_pickles_card_age',
                        help="Output pkl path the intermediate pickle files")
    parser.add_argument("--output", dest="output_path", type=str, default=None,
                        help="Output pkl path that save mesh motion outcome. "
                             "Default is mesh_descriptor.pkl which outputs to the same directory as csv_path")
    parser.add_argument("--n-frames", dest="n_frames", type=int, default=50, help="Number of frames in motion.")

    args = parser.parse_args()
    return args


if __name__ == '__main__':
    args = parse_args()
    numpy_arrays_pkls_dir = args.numpy_arrays_pkls_dir
    if args.individual_ids_csv_path is None:
        individual_ids_csv_path = Path(os.path.realpath(__file__)).parent.parent.parent.joinpath(
            "data", "healthy_5411_bridged_QC_25Feb2022.csv"
        )
        #import ipdb; ipdb.set_trace()
    else:
        individual_ids_csv_path = Path(args.individual_ids_csv_path)
    if args.output_path is None:
        output_path = individual_ids_csv_path.parent.joinpath("mesh_descriptor.pkl")
    else:
        output_path = Path(args.output_path)
    subject_dir = Path(args.subject_dir)
    n_frames = args.n_frames
    main(individual_ids_csv_path, subject_dir, output_path, n_frames, numpy_arrays_pkls_dir)
